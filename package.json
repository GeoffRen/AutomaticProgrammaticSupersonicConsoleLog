{
	"name": "automaticprogrammaticsupersonicconsolelog",
	"displayName": "Automatic Programmatic Supersonic Console Log",
	"description": "Supports creating log messages in every language conceivable. This extension allows you to AUTOMATICALLY/PROGRAMMATICALLY insert meaningful log messages into your code at SUPERSONIC speeds.",
	"version": "1.0.1",
	"publisher": "GeoffRen",
	"engines": {
		"vscode": "^1.47.0"
	},
	"categories": [
		"Programming Languages",
		"Snippets",
		"Other"
	],
	"keywords": [
		"console",
		"log",
		"print",
		"echo",
		"debug"
	],
	"icon": "images/icon.png",
	"activationEvents": [
		"onCommand:automaticprogrammaticsupersonicconsolelog.insertLogMessage",
		"onCommand:automaticprogrammaticsupersonicconsolelog.insertLogMessageDirectlyBelow",
		"onCommand:automaticprogrammaticsupersonicconsolelog.insertLogMessageDirectlyAbove",
		"onCommand:automaticprogrammaticsupersonicconsolelog.commentAllLogMessages",
		"onCommand:automaticprogrammaticsupersonicconsolelog.uncommentAllLogMessages",
		"onCommand:automaticprogrammaticsupersonicconsolelog.deleteAllLogMessages"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": {
			"title": "Automatic Programmatic Supersonic Console Log",
			"properties": {
				"automaticProgrammaticSupersonicConsoleLog.label": {
					"type": "string",
					"default": "APSCL TEXT: ",
					"markdownDescription": "What the label part of the log looks like. Use TEXT to describe where the extension will insert the name of the variable to be logged. Where the label is placed in the log can be controlled with `#automaticProgrammaticSupersonicConsoleLog.languageSettings#`."
				},
				"automaticProgrammaticSupersonicConsoleLog.wrapLogMessage": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Whether the log message should be wrapped with other logs. The wrapped log structure can be defined with `#automaticProgrammaticSupersonicConsoleLog.languageSettings#`."
				},
				"automaticProgrammaticSupersonicConsoleLog.defaultLanguageSettings": {
					"type": "object",
					"default": {
						"commentSymbol": "//",
						"logFormat": "console.log('LABEL' + TEXT);",
						"defaultLogFormat": "console.log();",
						"wrappedLogFormat": "console.log('~~~~~~ APSCL ~~~~~~');"
					},
					"markdownDescription": "The default language setting if the current language does not exist in `#automaticProgrammaticSupersonicConsoleLog.languageSettings#`."
				},
				"automaticProgrammaticSupersonicConsoleLog.languageSettings": {
					"type": "array",
					"default": [
						{
							"commentSymbol": "//",
							"fileExtension": "cpp",
							"logFormat": "cout << \"LABEL\" << TEXT << endl;",
							"defaultLogFormat": "cout << << endl;",
							"wrappedLogFormat": "cout << \"~~~~~~ APSCL ~~~~~~\" << endl;"
						},
						{
							"commentSymbol": "//",
							"fileExtension": "cs",
							"logFormat": "Console.WriteLine(\"LABEL\" + TEXT);",
							"defaultLogFormat": "Console.WriteLine();",
							"wrappedLogFormat": "Console.WriteLine(\"~~~~~~ APSCL ~~~~~~\");"
						},
						{
							"commentSymbol": "//",
							"fileExtension": "go",
							"logFormat": "fmt.Println(\"LABEL\" + TEXT)",
							"defaultLogFormat": "fmt.Println()",
							"wrappedLogFormat": "fmt.Println(\"~~~~~~ APSCL ~~~~~~\")"
						},
						{
							"commentSymbol": "//",
							"fileExtension": "java",
							"logFormat": "System.out.println(\"LABEL\" + TEXT);",
							"defaultLogFormat": "System.out.println();",
							"wrappedLogFormat": "System.out.println(\"~~~~~~ APSCL ~~~~~~\");"
						},
						{
							"commentSymbol": "//",
							"fileExtension": "js",
							"logFormat": "console.log('LABEL' + TEXT);",
							"defaultLogFormat": "console.log();",
							"wrappedLogFormat": "console.log('~~~~~~ APSCL ~~~~~~');"
						},
						{
							"commentSymbol": "//",
							"fileExtension": "ts",
							"logFormat": "console.log('LABEL' + TEXT);",
							"defaultLogFormat": "console.log();",
							"wrappedLogFormat": "console.log('~~~~~~ APSCL ~~~~~~');"
						},
						{
							"commentSymbol": "#",
							"fileExtension": "py",
							"logFormat": "print(\"LABEL\" + TEXT)",
							"defaultLogFormat": "print()",
							"wrappedLogFormat": "print(\"~~~~~~ APSCL ~~~~~~\")"
						},
						{
							"commentSymbol": "#",
							"fileExtension": "r",
							"logFormat": "cat(\"LABEL\", TEXT, \"\\n\")",
							"defaultLogFormat": "print()",
							"wrappedLogFormat": "print(\"~~~~~~ APSCL ~~~~~~\")"
						},
						{
							"commentSymbol": "#",
							"fileExtension": "rb",
							"logFormat": "puts \"LABEL + #TEXT\"",
							"defaultLogFormat": "puts ",
							"wrappedLogFormat": "puts \"~~~~~~ APSCL ~~~~~~\""
						},
						{
							"commentSymbol": "//",
							"fileExtension": "swift",
							"logFormat": "print(\"LABEL \\(TEXT)\")",
							"defaultLogFormat": "print()",
							"wrappedLogFormat": "print(\"~~~~~~ APSCL ~~~~~~\")"
						}
					],
					"markdownDescription": "Describes the format of the logs in different programming languages. Use LABEL to describe where the extension will insert the descriptor label. The descriptor label is defined with `#automaticProgrammaticSupersonicConsoleLog.label#`. Use TEXT to describe where the extension will insert the variable to be logged."
				}
			}
		},
		"commands": [
			{
				"command": "automaticprogrammaticsupersonicconsolelog.insertLogMessage",
				"title": "Automatic Programmatic Supersonic Console Log: Insert Log Message"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.insertLogMessageDirectlyBelow",
				"title": "Automatic Programmatic Supersonic Console Log: Insert Log Message Directly Below"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.insertLogMessageDirectlyAbove",
				"title": "Automatic Programmatic Supersonic Console Log: Insert Log Message Directly Above"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.commentAllLogMessages",
				"title": "Automatic Programmatic Supersonic Console Log: Comment All Log Messages"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.uncommentAllLogMessages",
				"title": "Automatic Programmatic Supersonic Console Log: Uncomment All Log Messages"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.deleteAllLogMessages",
				"title": "Automatic Programmatic Supersonic Console Log: Delete All Log Messages"
			}
		],
		"keybindings": [
			{
				"command": "automaticprogrammaticsupersonicconsolelog.insertLogMessage",
				"key": "alt+shift+w",
				"mac": "alt+shift+w"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.insertLogMessageDirectlyBelow",
				"key": "alt+shift+e",
				"mac": "alt+shift+e"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.insertLogMessageDirectlyAbove",
				"key": "alt+shift+q",
				"mac": "alt+shift+q"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.commentAllLogMessages",
				"key": "alt+shift+c",
				"mac": "alt+shift+c"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.uncommentAllLogMessages",
				"key": "ctrl+alt+shift+c",
				"mac": "cmd+alt+shift+c"
			},
			{
				"command": "automaticprogrammaticsupersonicconsolelog.deleteAllLogMessages",
				"key": "alt+shift+d",
				"mac": "alt+shift+d"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"lint": "eslint . --ext .ts",
		"watch": "tsc -watch -p ./"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/node": "^13.11.0",
		"@types/vscode": "^1.47.0",
		"@typescript-eslint/eslint-plugin": "^3.7.1",
		"@typescript-eslint/parser": "^3.7.1",
		"eslint": "^7.5.0",
		"glob": "^7.1.6",
		"typescript": "^3.8.3",
		"vscode-test": "^1.3.0"
	},
	"license": "SEE LICENSE IN LICENSE.txt",
	"homepage": "https://github.com/GeoffRen/AutomaticProgrammaticSupersonicConsoleLog/blob/master/README.md",
	"bugs": {
		"url": "https://github.com/GeoffRen/AutomaticProgrammaticSupersonicConsoleLog/issues",
		"email": "thegeoffren@gmail.com"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/GeoffRen/AutomaticProgrammaticSupersonicConsoleLog"
	}
}